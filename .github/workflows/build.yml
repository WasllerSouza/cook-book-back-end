name: Sonar Build
on:
  push:
    branches:
      - develop
      - '**-sonar'  
jobs:
  build:
    name: Build
    runs-on: windows-latest
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu' # Alternative distribution options are available.
          
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
          
      - name: Setup .NET 6
        uses: actions/setup-dotnet@v1
        with: 
          dotnet-version: 6.0.x
          
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
          
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v3
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
          
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
          
      - name: Build and analyze
        uses: highbyte/sonarscan-dotnet@v2.2.6
        with:
          # The key of the SonarQube project
          sonarProjectKey: /k:"WASLLERSOUZACOOKBOOKBACKEND"
          # The name of the SonarQube project
          sonarProjectName:  /K:"cook-book-back-end"
          # The name of the SonarQube organization in SonarCloud. For hosted SonarQube, skip this setting.
          sonarOrganization: /k:"WasllerSouza"
          # Optional command arguments to dotnet build
          dotnetBuildArguments: ./src
          # Optional command arguments to dotnet test
          dotnetTestArguments: ./tests --logger trx --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
          # Optional extra command arguments the the SonarScanner 'begin' command
          sonarBeginArguments: /d:sonar.cs.opencover.reportsPaths="**/TestResults/**/coverage.opencover.xml" -d:sonar.cs.vstest.reportsPaths="**/TestResults/*.trx"
          
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}